@page "/port-scanner"
@model PortScannerModel
@{
    ViewData["Title"] = "Port Scanner";
}

<div class="bg-white relative overflow-hidden">
    <!-- Background Animation -->
    <div class="absolute inset-0 z-0">
        <svg class="w-full h-full" xmlns="http://www.w3.org/2000/svg">
            <defs>
                <pattern id="grid" width="50" height="50" patternUnits="userSpaceOnUse">
                    <path d="M 50 0 L 0 0 0 50" fill="none" stroke="rgba(99, 102, 241, 0.1)" stroke-width="1"/>
                </pattern>
                <!-- Gradient for nodes -->
                <radialGradient id="nodeGradient">
                    <stop offset="0%" stop-color="rgba(99, 102, 241, 0.2)"/>
                    <stop offset="100%" stop-color="rgba(99, 102, 241, 0)"/>
                </radialGradient>
            </defs>
            
            <!-- Background Grid -->
            <rect width="100%" height="100%" fill="url(#grid)" />
            
            <!-- Animated Elements -->
            <g class="nodes-and-connections">
                <!-- This will be populated by JavaScript -->
            </g>
        </svg>
    </div>

    <!-- Existing Content (with higher z-index) -->
    <div class="relative isolate px-6 pt-14 lg:px-8 z-10">
        <div class="mx-auto max-w-4xl py-8">
            <div class="text-center">
                <h1 class="text-4xl font-bold tracking-tight text-gray-900 sm:text-6xl mb-8">Port Scanner</h1>
                <p class="text-lg leading-8 text-gray-600 mb-12">Analyze open ports and services on web servers.</p>
                
                <div class="mt-8">
                    <!-- Tab Navigation -->
                    <div class="border-b border-gray-200">
                        <nav class="-mb-px flex justify-center space-x-8" aria-label="Tabs">
                            <button onclick="switchTab('common')" 
                                    class="tab-button whitespace-nowrap border-b-2 py-4 px-1 text-sm font-medium border-indigo-500 text-indigo-600" 
                                    id="common-tab">
                                Common Port Scan
                            </button>
                            <button onclick="switchTab('direct')" 
                                    class="tab-button whitespace-nowrap border-b-2 py-4 px-1 text-sm font-medium border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700" 
                                    id="direct-tab">
                                Direct Port Scan
                            </button>
                        </nav>
                    </div>

                    <!-- Tab Content -->
                    <div class="mt-8">
                        <div id="common-content" class="tab-content">
                            <div class="bg-white shadow-sm ring-1 ring-gray-900/5 rounded-xl p-8">
                                <form id="portScannerForm" class="max-w-xl mx-auto">
                                    <div class="space-y-6">
                                        <div>
                                            <label for="url" class="block text-sm font-medium leading-6 text-gray-900 text-left">URL or IP Address</label>
                                            <div class="mt-2">
                                                <input type="text" name="url" id="url"
                                                       class="block w-full rounded-lg border-0 px-4 py-3 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                                                       placeholder="Enter domain (e.g., example.com)" required />
                                            </div>
                                        </div>
                                        <div>
                                            <button type="submit"
                                                    class="w-full rounded-lg bg-indigo-600 px-6 py-3 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                                Start Scan
                                            </button>
                                        </div>
                                    </div>
                                </form>
                                <div id="scanResults"></div>
                            </div>
                        </div>
                        <div id="direct-content" class="tab-content hidden">
                            <div class="bg-white shadow-sm ring-1 ring-gray-900/5 rounded-xl p-8">
                                <form id="directScanForm" class="max-w-xl mx-auto">
                                    <div class="space-y-6">
                                        <div>
                                            <label for="directUrl" class="block text-sm font-medium leading-6 text-gray-900 text-left">URL or IP Address</label>
                                            <div class="mt-2">
                                                <input type="text" name="directUrl" id="directUrl"
                                                       class="block w-full rounded-lg border-0 px-4 py-3 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                                                       placeholder="Enter domain (e.g., example.com)" required />
                                            </div>
                                        </div>
                                        <div>
                                            <label for="port" class="block text-sm font-medium leading-6 text-gray-900 text-left">Port Number</label>
                                            <div class="mt-2">
                                                <input type="number" name="port" id="port"
                                                       class="block w-full rounded-lg border-0 px-4 py-3 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"
                                                       placeholder="Enter port number (e.g., 80)" 
                                                       min="1" max="65535" required />
                                            </div>
                                        </div>
                                        <div>
                                            <button type="submit"
                                                    class="w-full rounded-lg bg-indigo-600 px-6 py-3 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                                                Scan Port
                                            </button>
                                        </div>
                                    </div>
                                </form>
                                <div id="directScanResults"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/portScanner.js" asp-append-version="true"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const svg = document.querySelector('.nodes-and-connections');
            const nodes = [];
            const connections = [];
            
            // Create floating nodes
            function createNode() {
                const node = {
                    x: Math.random() * window.innerWidth,
                    y: Math.random() * window.innerHeight,
                    size: Math.random() * 8 + 4,
                    speedX: (Math.random() - 0.5) * 0.5,
                    speedY: (Math.random() - 0.5) * 0.5
                };
                
                const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
                circle.setAttribute("r", node.size);
                circle.setAttribute("fill", "url(#nodeGradient)");
                
                svg.appendChild(circle);
                node.element = circle;
                nodes.push(node);
            }
            
            // Create initial nodes
            for (let i = 0; i < 20; i++) {
                createNode();
            }
            
            // Animation loop
            function animate() {
                // Update nodes
                nodes.forEach(node => {
                    node.x += node.speedX;
                    node.y += node.speedY;
                    
                    // Bounce off edges
                    if (node.x < 0 || node.x > window.innerWidth) node.speedX *= -1;
                    if (node.y < 0 || node.y > window.innerHeight) node.speedY *= -1;
                    
                    node.element.setAttribute("cx", node.x);
                    node.element.setAttribute("cy", node.y);
                });
                
                // Update connections
                svg.querySelectorAll('line').forEach(line => line.remove());
                nodes.forEach((node, i) => {
                    nodes.slice(i + 1).forEach(otherNode => {
                        const distance = Math.hypot(node.x - otherNode.x, node.y - otherNode.y);
                        if (distance < 150) {
                            const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
                            line.setAttribute("x1", node.x);
                            line.setAttribute("y1", node.y);
                            line.setAttribute("x2", otherNode.x);
                            line.setAttribute("y2", otherNode.y);
                            line.setAttribute("stroke", "rgba(99, 102, 241, " + (1 - distance / 150) * 0.2 + ")");
                            line.setAttribute("stroke-width", "1");
                            svg.insertBefore(line, svg.firstChild);
                        }
                    });
                });
                
                requestAnimationFrame(animate);
            }
            
            animate();
            
            // Handle window resize
            window.addEventListener('resize', () => {
                nodes.forEach(node => {
                    node.x *= window.innerWidth / prevWidth;
                    node.y *= window.innerHeight / prevHeight;
                });
                prevWidth = window.innerWidth;
                prevHeight = window.innerHeight;
            });
            
            let prevWidth = window.innerWidth;
            let prevHeight = window.innerHeight;
        });
    </script>
} 